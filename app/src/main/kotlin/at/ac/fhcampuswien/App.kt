/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package at.ac.fhcampuswien

import java.lang.IllegalArgumentException
import java.lang.NumberFormatException

class App {
    // Game logic for a number guessing game
    fun playNumberGame(digitsToGuess: Int = 4) {
        //TODO: build a menu which calls the functions and works with the return values
        val randomNumber = generateRandomNonRepeatingNumber(digitsToGuess)
        var guessedNumber : Int?

        while (true) {
            println("Guess the number ($digitsToGuess digits): ")
            try {
                guessedNumber = readLine()?.toInt()
                if (guessedNumber != null) {
                    if (guessedNumber.toString().length != randomNumber.toString().length) {
                        println("You must enter a number with $digitsToGuess digits")
                        continue
                    }
                    val compareResult : CompareResult = checkUserInputAgainstGeneratedNumber(guessedNumber, randomNumber)
                    println(compareResult.toString())
                    if (compareResult.m == randomNumber.toString().length) {
                        println("User wins")
                        break
                    }
                }
            } catch (e: NumberFormatException) {
                println("Enter a valid number")
            }

        }

    }

    /**
     * Generates a non-repeating number of a specified length between 1-9.
     *
     * Note: The function is designed to generate a number where each digit is unique and does not repeat.
     * It is important to ensure that the length parameter does not exceed the maximum possible length
     * for non-repeating digits (which is 9 excluding 0 for base-10 numbers).
     *
     * @param length The length of the non-repeating number to be generated.
     *               This dictates how many digits the generated number will have.
     * @return An integer of generated non-repeating number.
     *         The generated number will have a number of digits equal to the specified length and will
     *         contain unique, non-repeating digits.
     * @throws IllegalArgumentException if the length is more than 9 or less than 1.
     */
    val generateRandomNonRepeatingNumber: (Int) -> Int = { length ->
        //TODO implement the function
        if (length !in 1..9) {
            throw IllegalArgumentException("length not between 1 and 9 (inclusive)")
        }
        val digits = (1..9).toMutableList()
        digits.shuffle()
        digits.subList(0, length).joinToString("").toInt()

    }

    /**
     * Compares the user's input integer against a generated number for a guessing game.
     * This function evaluates how many digits the user guessed correctly and how many of those
     * are in the correct position. The game generates number with non-repeating digits.
     *
     * Note: The input and the generated number must both be numbers.
     * If the inputs do not meet these criteria, an IllegalArgumentException is thrown.
     *
     * @param input The user's input integer. It should be a number with non-repeating digits.
     * @param generatedNumber The generated number with non-repeating digits to compare against.
     * @return [CompareResult] with two properties:
     *         1. `n`: The number of digits guessed correctly (regardless of their position).
     *         2. `m`: The number of digits guessed correctly and in the correct position.
     *         The result is formatted as "Output: m:n", where "m" and "n" represent the above values, respectively.
     * @throws IllegalArgumentException if the inputs do not have the same number of digits.
     */
    val checkUserInputAgainstGeneratedNumber: (Int, Int) -> CompareResult = { input, generatedNumber ->
        //TODO implement the function
        if ((input.toString().length != generatedNumber.toString().length) or
            (input.toString().length > 9 ) or (generatedNumber.toString().length > 9)) {

            throw IllegalArgumentException("input and generatedNumber must be the same length < 9")
        }

        var n = 0   // correct digits
        var m = 0   // correct digits in correct place

        val generatedNumberString = generatedNumber.toString()
        val inputString = input.toString()

        for (i in generatedNumber.toString().indices) {
            if (inputString.contains(generatedNumberString[i])) {
                n++
            }
            if (inputString[i] == generatedNumberString[i]) {
                m++
            }
        }
        CompareResult(n, m)
    }
}

fun main() {
    // TODO: call the App.playNumberGame function with and without default arguments
    val app = App()
    app.playNumberGame(2)

}
